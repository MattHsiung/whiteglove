{"version":3,"sources":["components/Barcode/index.js","api/listingById.js","hooks/listingById.js","components/ListingCard/index.js","components/ScanQr/index.js","components/ClothingLabel/index.js","components/CreateQr/index.js","App.js","serviceWorker.js","index.js"],"names":["Barcode","onScan","useEffect","Quagga","init","inputStream","name","type","target","document","querySelector","decoder","readers","err","console","log","start","onDetected","handler","data","codeResult","code","offProcessed","stop","id","fetch","method","body","JSON","stringify","params","then","res","json","listing","hits","Error","useListingById","useSWR","listingById","Img","styled","img","Title","h2","User","h5","Price","h4","Space","span","ListingCard","price","src","cover_photo","url","title","user","username","Intl","NumberFormat","style","currency","format","modifier","onClick","window","open","formatUrl","icon","ScanQr","useState","listingId","setListingId","error","isCancelable","className","Label","div","ClothingLabel","componentRef","useRef","trigger","content","current","ref","value","Date","created_at","toUTCString","CreateQr","codeToGenerate","setCodeToGenerate","onChange","event","placeholder","message","App","position","tabBorder","renderTabs","tab","label","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af666c80.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport Quagga from \"quagga\";\nconst Barcode = ({ onScan }) => {\n  useEffect(() => {\n    Quagga.init(\n      {\n        inputStream: {\n          name: \"Live\",\n          type: \"LiveStream\",\n          target: document.querySelector(\"#barcode\") // Or '#yourElement' (optional)\n        },\n        decoder: {\n          readers: [\"code_128_reader\"]\n        }\n      },\n      function(err) {\n        if (err) {\n          console.log(err);\n          return;\n        }\n        const handler = data => {\n          if (data.codeResult.code) {\n            Quagga.offProcessed(handler);\n            Quagga.stop();\n            onScan(data.codeResult.code);\n          }\n        };\n        Quagga.start();\n        Quagga.onDetected(handler);\n      }\n    );\n  }, []);\n  return <div id=\"barcode\" />;\n};\n\nexport default Barcode;\n","const algoliaUrl =\n  \"https://mnrwefss2q-dsn.algolia.net/1/indexes/Listing_all_production/query?x-algolia-agent=Algolia%20for%20JavaScript%20(3.33.0)%3B%20Browser&x-algolia-application-id=MNRWEFSS2Q&x-algolia-api-key=a3a4de2e05d9e9b463911705fb6323ad\";\nexport default id =>\n  fetch(algoliaUrl, {\n    method: \"post\",\n    body: JSON.stringify({\n      params: `query=&filters=objectID:${id}`\n    })\n  })\n    .then(res => res.json())\n    .then(res => {\n      const listing = res.hits[0];\n      if (!listing) throw new Error(\"No listing found\");\n      return listing;\n    });\n","import useSWR from 'swr'\nimport listingById from \"../api/listingById\";\n\nconst useListingById = (id) =>\n\tuseSWR(id, listingById);\n\nexport default useListingById;\n","import React from \"react\";\nimport { Button, Card, Icon } from \"react-onsenui\";\nimport styled from \"styled-components\";\n\nconst Img = styled.img`\n  max-width: 100%;\n`;\n\nconst Title = styled.h2``;\nconst User = styled.h5``;\nconst Price = styled.h4``;\nconst Space = styled.span`\n  padding: 0 10px;\n`;\n\nconst formatPrice = price =>\n  new Intl.NumberFormat(\"en-US\", { style: \"currency\", currency: \"USD\" }).format(\n    price\n  );\nconst formatUrl = listing => `https://www.grailed.com/listings/${listing.id}`;\nconst ListingCard = ({ listing }) => (\n  <Card>\n    <Img src={listing.cover_photo.url} />\n    <Title>{listing.title}</Title>\n    <User>{listing.user.username}</User>\n    <Price>{formatPrice(listing.price)}</Price>\n    <Button\n      modifier=\"large--cta\"\n      onClick={() => window.open(formatUrl(listing), \"_blank\")}\n    >\n      <span>Open in Grailed</span>\n      <Space />\n      <Icon icon=\"fa-external-link-alt\" />\n    </Button>\n  </Card>\n);\n\nexport default ListingCard;\n","import React, { useState } from \"react\";\nimport { Button, Page, AlertDialog, Card } from \"react-onsenui\";\n// import QrReader from \"react-qr-reader\";\nimport Barcode from '../Barcode';\nimport useListingById from \"../../hooks/listingById\";\nimport ListingCard from \"../ListingCard\";\n\nconst ScanQr = () => {\n  const [listingId, setListingId] = useState(null);\n  const { data: listing, error } = useListingById(listingId);\n  return (\n    <Page>\n      {error && (\n        <AlertDialog isCancelable>\n          <div className=\"alert-dialog-title\">Warning!</div>\n          <div className=\"alert-dialog-content\">An error has occurred!</div>\n          <div className=\"alert-dialog-footer\">\n            <Button className=\"alert-dialog-button\">Ok</Button>\n          </div>\n        </AlertDialog>\n      )}\n      {!listing && <Barcode onScan={setListingId} />}\n      {listingId && listing && (\n        <>\n          <Card>\n            <Button modifier=\"large--cta\" onClick={() => setListingId(null)}>\n              Back to Scanner\n            </Button>\n          </Card>\n          <ListingCard listing={listing} />\n        </>\n      )}\n    </Page>\n  );\n};\n\nexport default ScanQr;\n","import React, { useRef } from \"react\";\n// import QRCode from \"qrcode.react\";\nimport Barcode from \"react-barcode\";\nimport { Button, Card } from \"react-onsenui\";\nimport styled from \"styled-components\";\nimport ReactToPrint from \"react-to-print\";\n\nconst Label = styled.div`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-gap: 10px;\n  border: 2px dashed black;\n  padding: 20px;\n`;\n\nconst ClothingLabel = ({ listing }) => {\n  const componentRef = useRef();\n  return (\n    <Card>\n      <ReactToPrint\n        trigger={() => <Button>Print this out!</Button>}\n        content={() => componentRef.current}\n      />\n\n      <Label ref={componentRef}>\n        {/*<QRCode value={`${listing.id}`} />*/}\n        <Barcode value={`${listing.id}`} />\n        <div>\n          <p>{listing.title}</p>\n          <p>{listing.user.username}</p>\n          <p>{new Date(listing.created_at).toUTCString()}</p>\n        </div>\n      </Label>\n    </Card>\n  );\n};\n\nexport default ClothingLabel;\n","import React, { useState } from \"react\";\nimport { Button, Card, Input, Page } from \"react-onsenui\";\nimport useListingById from \"../../hooks/listingById\";\nimport ClothingLabel from \"../ClothingLabel\";\n\n\nconst CreateQr = () => {\n  const [listingId, setListingId] = useState(\"\");\n  const [codeToGenerate, setCodeToGenerate] = useState(null);\n  const { data: listing, error } = useListingById(codeToGenerate);\n  return (\n    <Page>\n      <Card>\n        <h1>Enter Listing Id</h1>\n        <Input\n          value={listingId}\n          onChange={event => setListingId(event.target.value)}\n          modifier=\"underbar\"\n          placeholder=\"Listing Id\"\n        />\n        <Button\n          modifier=\"large--cta\"\n          onClick={() => setCodeToGenerate(listingId)}\n        >\n          Create QR code\n        </Button>\n      </Card>\n      {error && (\n        <Card>\n          <p>{error.message}</p>\n        </Card>\n      )}\n      {listing && (\n\t\t\t\t<ClothingLabel listing={listing} />\n      )}\n    </Page>\n  );\n};\n\nexport default CreateQr;\n","import React from \"react\";\nimport { Page, Tabbar, Tab } from \"react-onsenui\";\nimport \"onsenui/css/onsenui.css\";\nimport \"onsenui/css/onsen-css-components.css\";\nimport ScanQr from \"./components/ScanQr\";\nimport CreateQr from \"./components/CreateQr\";\n\nconst App = () => (\n  <Page>\n    <Tabbar\n      position=\"bottom\"\n      tabBorder\n      renderTabs={() => [\n        {\n          content: <ScanQr />,\n          tab: <Tab label=\"Scan\" icon=\"fa-qrcode\" />\n        },\n        {\n          content: <CreateQr />,\n          tab: <Tab label=\"Tag\" icon=\"fa-tag\" />\n        }\n      ]}\n    />\n  </Page>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}